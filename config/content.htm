<h1>Weeks</h1>
<p><a href="https://s40723216.github.io/cd2020/content/week1~5.html">week1~5</a></p>
<p><a href="https://s40723216.github.io/cd2020/content/week6~9.html">week6~9</a></p>
<p><a href="https://s40723216.github.io/cd2020/content/week10~14.html">week10~14</a></p>
<p><a href="https://s40723216.github.io/cd2020/content/week15~18.html">week15~18</a></p>
<h2>week1~5</h2>
<h4></h4>
<h4><span style="color: #000000;">建立cd2020倉儲  </span></h4>
<p><span>1.下載</span><span><a href="https://drive.google.com/file/d/1fxMdqdCoCL__O1IpZ-Sv-A_4-c77Wx4E/view?usp=sharing">2019Fall可攜套件.7z</a></span><span><span> </span>(編譯  Solvespace 用)，完成後開啟。<br/>2.登入個人github帳號，創建新的倉儲cd2020。<br/></span><span>3.進入要存放的</span><span>資料夾<br/></span><span>4.輸入</span><span>git clone  <span>https://github.com/s40723216/cd2020<span> 。</span></span><span><br/>5.輸入git submod<span style="color: #808080;">u</span>le add https://github.com/mdecourse/cmsimde.git 。<br/>6.將up_dir的裡的資料複<span>製到cd2020</span>。<br/>7.完成後，python wsgi.py 開始編輯倉儲。<br/>8.編輯完成後，<span> </span>git add .<span><span> &gt;</span></span><span> </span>git commit -m "  "<span><span> </span>&gt;</span><span> </span>git push。  </span></span></p>
<p></p>
<h4><span style="color: #000000;">更新python至3.8.2</span></h4>
<p>1.至<a href="https://www.python.org/">pyson官網</a>&gt;downland&gt;<a href="https://www.python.org/downloads/windows/">windows</a>，下載下圖勾選的檔案</p>
<p><img alt="" src="/images/index.html"/><img alt="" height="238" src="/images/3.8.2下載檔.PNG" width="479"/></p>
<p>2.完成後開啟安裝檔，點選Customize installation</p>
<p><img alt="" height="193" src="/images/stall圖片.PNG" width="321"/></p>
<p>3.將pip取消勾選後按下一步</p>
<p>4.將安裝位置改成Y槽的py382資料夾(自行建立)，其餘不變</p>
<p>5.安裝好後將start_mdecourse進行編譯，將py373皆改為py382</p>
<p><img alt="" height="300" src="/images/編譯器.PNG" width="260"/></p>
<p>6.儲存後並重新啟動，在黑窗輸入指令:<strong><span>python get-pip.py</span></strong></p>
<p>7.進度條跑完後接著輸入:<strong><span>python -m pip install <span style="color: #ff0000;">flask</span></span></strong></p>
<p><span style="color: #ff0000;"><strong>flask-cors 、markdown、 lxml 、bs4、 pelican 、leo</strong></span></p>
<p><span style="color: #000000;"><strong><img alt="" height="26" src="/images/馬客到.PNG" width="207"/></strong></span></p>
<p><img alt="" height="27" src="/images/府雷斯克.PNG" width="183"/></p>
<p>依序輸入並跑完後即完成更新。</p>
<p></p>
<h4><span style="color: #000000;">小組分配工作以及問題討論</span></h4>
<p></p>
<p><img alt="" height="237" id="__mcenew" src="/images/分組.jpg" width="421"/></p>
<p></p>
<p><span><span><span>第一次直播開會影片:</span><a href="https://www.youtube.com/watch?v=nKNgEypBalo">https://www.youtube.com/watch?v=nKNgEypBalo</a></span></span></p>
<p><span><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/nKNgEypBalo" width="560"></iframe></span></span></p>
<h1>Assignment1</h1>
<h3>Line following BubbleRob tutorial</h3>
<h6><span lang="zh-TW">在本教程中，我們旨在擴展BubbleRob的功能，以使他它遵循之前的規則。確保您已經閱讀並理解了第一個BubbleRob教程。本教程由Eric Rohmer提供。</span></h6>
<h6 class="tw-data-text tw-text-large tw-ta" data-placeholder="翻譯" dir="ltr" id="tw-target-text"><span lang="zh-TW">在CoppeliaSim的安裝文件夾中的tutorials / BubbleRob中加載第一個BubbleRob教程的場景。與本教程相關的場景文件位於tutorials / LineFollowingBubbleRob中。<br/>下圖說明了我們將設計的仿真場景：</span></h6>
<h5 class="tw-data-text tw-text-large tw-ta" data-placeholder="翻譯" dir="ltr"><span lang="zh-TW"><img height="353" src="https://www.coppeliarobotics.com/helpFiles/en/images/lbubbleRobTut1.jpg" width="544"/><br/></span></h5>
<h6 class="tw-data-text tw-text-large tw-ta" data-placeholder="翻譯" dir="ltr" id="tw-target-text"><span lang="zh-TW">我們首先創建3個視覺傳感器中的第一個，並將其附加到bubbleRob對象。選擇[菜單欄-&gt;添加-&gt;視覺傳感器-&gt;正交類型]。通過雙擊場景層次中新創建的視覺傳感器圖標來編輯其屬性，並更改參數以反映以下對話框：</span></h6>
<p><span lang="zh-TW">                                  <img height="405" src="https://www.coppeliarobotics.com/helpFiles/en/images/lbubbleRobTut2.jpg" width="261"/></span></p>
<h6><span lang="zh-TW">視覺傳感器必需面向地面，因此選擇它，然後在“方向”對話框中的“方向”選項上，將“ Alpha-Beta-Gamma”項設置為[180; 0; 0]。</span></h6>
<h6><span lang="zh-TW">我們有幾種可能性可以讀取視覺傳感器。由於我們的視覺傳感器只有一個像素，並且操作簡單，因此我們只需查詢視覺傳感器讀取的圖像的平均強度值即可。對於更複雜的情況，我們可以設置視覺回調函數。現在，複製並貼上視覺傳感器兩次，並將其名稱調整為leftSensor，middleSensor和rightSensor。將bubbleRob設置為其關係（即，將其附加到bubbleRob對象）。現在，您的傳感器在場景層次中應如下所示：</span></h6>
<p><span lang="zh-TW">                                     <img src="https://www.coppeliarobotics.com/helpFiles/en/images/lbubbleRobTut4.jpg"/></span></p>
<h6 class="tw-data-text tw-text-large tw-ta" data-placeholder="翻譯" dir="ltr" id="tw-target-text"><span lang="zh-TW">讓我們正確放置傳感器。為此使用位置對話框，在位置選項卡上，並設置以下絕對坐標： 左傳感器：[0.2; 0.042; 0.018] 中間傳感器：[0.2; 0; 0.018] 右傳感器：[0.2; -0.042; 0.018]<br/><span><br/>現在讓我們修改環境。我們可以移去BubbleRob前面的幾個圓柱體。接下來，我們將構建機器人將嘗試遵循的路徑。從現在開始切換到頂視圖：通過頁面選擇器工具欄按鈕選擇頁面4。然後點擊[菜單欄-&gt;添加-&gt;路徑-&gt;圓圈類型]。使用鼠標啟用對象移動。您可以通過兩種方式調整路徑的形狀： 選擇路徑（並且只有路徑）後，按住Ctrl並點擊其控制點之一。然後可以將它們拖動到正確的位置。 選擇路徑後，進入路徑編輯模式。在那裡，您可以靈活地調整各個路徑控制點。</span><br/></span></h6>
<h6 class="tw-data-text tw-text-large tw-ta" data-placeholder="翻譯" dir="ltr" id="tw-target-text"><span lang="zh-TW">一旦對路徑的幾何形狀滿意（您隨時可以在以後的階段對其進行修改），請選擇它，然後在路徑屬性中取消選中“顯示點的方向”，“顯示路徑線”和“顯示路徑上的當前位置”。然後點擊顯示路徑整形對話框。這將打開路徑整形對話框。點擊啟用路徑變更，將類型設置為水平線段，並將縮放因子設置為4.0。最後將顏色調整為黑色。我們必須對路徑進行最後一個重要的調整：當前，路徑的z位置與地板的z位置重合。結果是有時我們會看到路徑，有時會看到地板（這種效果在openGl行話中被稱為“ z-fighting”）。這不僅影響我們所看到的，而且還會影響視覺傳感器所看到的。為了避免與z戰鬥有關的問題，只需將路徑對象的位置向上移動0.5毫米即可。</span></h6>
<h6 class="tw-data-text tw-text-large tw-ta" data-placeholder="翻譯" dir="ltr" id="tw-target-text"><span lang="zh-TW">最後一步是調整BubbleRob的控制器，使其也將遵循黑色路徑。打開附加到bubbleRob的子腳本，並將其替換為以下代碼：</span></h6>
<table>
<tbody>
<tr>
<td>
<pre class="lightRedBox">function speedChange_callback(ui,id,newVal)
    speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100
end

function sysCall_init()
    -- This is executed exactly once, the first time this script is executed
    bubbleRobBase=sim.getObjectAssociatedWithScript(sim.handle_self)
    leftMotor=sim.getObjectHandle("leftMotor")
    rightMotor=sim.getObjectHandle("rightMotor")
    noseSensor=sim.getObjectHandle("sensingNose")
    minMaxSpeed={50*math.pi/180,300*math.pi/180}
    backUntilTime=-1 -- Tells whether bubbleRob is in forward or backward mode
    floorSensorHandles={-1,-1,-1}
    floorSensorHandles[1]=sim.getObjectHandle("leftSensor")
    floorSensorHandles[2]=sim.getObjectHandle("middleSensor")
    floorSensorHandles[3]=sim.getObjectHandle("rightSensor")
    -- Create the custom UI:
        xml = '&lt;ui title="'..sim.getObjectName(bubbleRobBase)..' speed" closeable="false" resizeable="false" activate="false"&gt;'..[[
        &lt;hslider minimum="0" maximum="100" onchange="speedChange_callback" id="1"/&gt;
        &lt;label text="" style="* {margin-left: 300px;}"/&gt;
        &lt;/ui&gt;
        ]]
    ui=simUI.reate(xml)
    speed=(minMaxSpeed[1]+minMaxSpeed[2])*0.5
    simUI.setSliderValue(ui,1,100*(speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1]))
end

function sysCall_actuation()
    result=sim.readProximitySensor(noseSensor)
    if (result&gt;0) then backUntilTime=sim.getSimulationTime()+4 end

    -- read the line detection sensors:
    sensorReading={false,false,false}
    for i=1,3,1 do
        result,data=sim.readVisionSensor(floorSensorHandles[i])
        if (result&gt;=0) then
            sensorReading[i]=(data[11]&lt;0.3) -- data[11] is the average of intensity of the image
        end
        print(sensorReading[i])
    end

    -- compute left and right velocities to follow the detected line:
    rightV=speed
    leftV=speed
    if sensorReading[1] then
        leftV=0.03*speed
    end
    if sensorReading[3] then
        rightV=0.03*speed
    end
    if sensorReading[1] and sensorReading[3] then
        backUntilTime=sim.getSimulationTime()+2
    end

    if (backUntilTime&lt;sim.getSimulationTime()) then
        -- When in forward mode, we simply move forward at the desired speed
        sim.setJointTargetVelocity(leftMotor,leftV)
        sim.setJointTargetVelocity(rightMotor,rightV)
    else
        -- When in backward mode, we simply backup in a curve at reduced speed
        sim.setJointTargetVelocity(leftMotor,-speed/2)
        sim.setJointTargetVelocity(rightMotor,-speed/8)
    end
end

function sysCall_cleanup()
	simUI.destroy(ui)<br/>end</pre>
</td>
</tr>
</tbody>
</table>
<h6 class="tw-data-text tw-text-large tw-ta" data-placeholder="翻譯" dir="ltr" id="tw-target-text"><span lang="zh-TW">您可以輕鬆地調試以下視覺傳感器的生產線：選擇一個，然後在場景視圖中選擇[右鍵-&gt;添加-&gt;浮動視圖]，然後在新添加的浮動視圖中選擇[右鍵-&gt;視圖- -&gt;將視圖與選定的視覺傳感器關聯]。</span></h6>
<h1>About</h1>
<p></p>
<p><span>cd2020-bg1分組網站:</span><a href="https://s40723246.github.io/cd2020-bg1/content/index.html" rel="nofollow">https://s40723246.github.io/cd2020-bg1/content/index.html</a></p>
<p><strong>group members</strong><br/><span>吳沛汶Repository:<span> </span></span><a cd2020="" com="" github="" href="https://s40723246.github.io/cd2020-bg1/content/htt%3Ch2%3Eweek6~week9%3C/h2%3E%3Ch2%3Eweek10~week14%3C/h2%3E%3Ch2%3Eweek15~week18%3C/h2%3E%3Ch1%3Emembers%3C/h1%3E%3Cp%3E%3Cspan%3ERepository:%C2%A0%3C/span%3E%3Ca%20href=" https:="" s40723201="">40723201</a><span><span> </span>| Site:<span> </span></span><span><a href="https://s40723201.github.io/cd2020">40723201</a></span><br/><span>王冠驊Repository:<span> </span></span><a href="https://github.com/s40723206/cd2020">40723206</a><span><span> </span>| Site:<span> </span></span><span><a href="https://s40723206.github.io/cd2020">40723206</a></span><span> (小組長)</span><br/><span>杜玗宸Repository:<span> </span></span><a href="https://github.com/s40723213/cd2020">40723213</a><span><span> </span>| Site:<span> </span></span><span><a href="https://s40723213.github.io/cd2020">40723213</a></span><br/><span>林子欽Repository:<span> </span></span><a href="https://github.com/s40723216/cd2020">40723216</a><span><span> </span>| Site:<span> </span></span><span><a href="https://s40723216.github.io/cd2020">40723216</a></span><br/><span>洪維成Repository:<span> </span></span><a href="https://github.com/s40723223/cd2020">40723223</a><span><span> </span>| Site:<span> </span></span><a href="https://s40723223.github.io/cd2020">40723223</a><br/><span>高立倫Repository:<span> </span></span><a href="https://github.com/s40723226/cd2020">40723226</a><span><span> </span>| Site:<span> </span></span><a href="https://s40723226.github.io/cd2020">40723226</a><br/><span>陳羽泓Repository:<span> </span></span><a href="https://github.com/s40723229/cd2020">40723229</a><span><span> </span>| Site:<span> </span></span><a href="https://s40723229.github.io/cd2020">40723229</a><span> </span><span>(小組長)</span><br/><span>陳冠樺Repository:<span> </span></span><a href="https://github.com/s40723230/cd2020">40723230</a><span><span> </span>| Site:<span> </span></span><a href="https://s40723230.github.io/cd2020">40723230</a><br/><span>葉承叡Repository:<span> </span></span><span><a href="https://github.com/s40723241/cd2020">40723241</a></span><span><span> </span>| Site:<span> </span></span><span><a href="https://s40723241.github.io/cd2020">40723241</a></span><br/><span>趙子得Repository:<span> </span></span><a href="https://github.com/s40723242/cd2020">40723242</a><span><span> </span>| Site:<span> </span></span><a href="https://s40723242.github.io/cd2020">40723242</a><span> (小組長)</span><br/><span>鄭竣元Repository:<span> </span></span><span><a href="https://github.com/s40723246/cd2020">40723246</a></span><span><span> </span>| Site:<span> </span></span><span><a href="https://s40723246.github.io/cd2020">40723246</a></span><span><span> </span>(group leader)</span><br/><span>Repository:<span> </span></span><a href="https://github.com/40732319/cd2020">40732319</a><span><span> </span>| Site:<span> </span></span><a href="https://40732319.github.io/cd2020">40732319</a></p>
<p><span><span></span></span></p>
